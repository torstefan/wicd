Support udhcpc, this is needed to smoothly run on the OpenMoko
FreeRunner.
Thanks to Luca Capello <gismo@debian.org> for porting the patch to 1.5.9, and
to "madmo" from the linked forum for making the patch.

Patch originally taken from http://wicd.net/punbb/viewtopic.php?id=132

Patch ported to 1.6.0 code by David Paleino <d.paleino@gmail.com>.
---
 data/wicd.glade   |   15 +++++++++++++++
 wicd/misc.py      |    1 +
 wicd/prefs.py     |    7 +++++--
 wicd/wnettools.py |   42 ++++++++++++++++++++++++++++++++++++++++--
 4 files changed, 61 insertions(+), 4 deletions(-)

--- wicd.orig/wicd/misc.py
+++ wicd/wicd/misc.py
@@ -49,6 +49,7 @@ AUTO = 0
 DHCLIENT = 1
 DHCPCD = 2
 PUMP = 3
+UDHCPC = 4
 
 # Link detection tools
 ETHTOOL = 1
--- wicd.orig/wicd/prefs.py
+++ wicd/wicd/prefs.py
@@ -82,7 +82,7 @@ class PreferencesDialog(object):
         self.preferwiredcheckbox.set_active(daemon.GetPreferWiredNetwork())
         
         dhcp_list = [self.dhcpautoradio, self.dhclientradio, self.dhcpcdradio, 
-                     self.pumpradio]
+                     self.pumpradio, self.udhcpcradio]
         self._setup_external_app_radios(dhcp_list, daemon.GetDHCPClient,
                                         daemon.SetDHCPClient)
         
@@ -210,8 +210,10 @@ class PreferencesDialog(object):
             dhcp_client = misc.DHCLIENT
         elif self.dhcpcdradio.get_active():
             dhcp_client = misc.DHCPCD
-        else:
+        elif self.pumpradio.get_active():
             dhcp_client = misc.PUMP
+        else:
+            dhcp_client = misc.UDHCPC
         daemon.SetDHCPClient(dhcp_client)
         
         if self.linkautoradio.get_active():
@@ -347,6 +349,7 @@ class PreferencesDialog(object):
         self.dhclientradio = self.wTree.get_widget("dhclient_radio")
         self.pumpradio = self.wTree.get_widget("pump_radio")
         self.dhcpcdradio = self.wTree.get_widget("dhcpcd_radio")
+        self.udhcpcradio = self.wTree.get_widget("udhcpc_radio")
         
         # Wired Link Detection Apps
         self.linkautoradio = setup_label("link_auto_radio", 'wicd_auto_config')
--- wicd.orig/data/wicd.glade
+++ wicd/data/wicd.glade
@@ -1171,6 +1171,21 @@ is already active.</property>
                                         <property name="position">2</property>
                                       </packing>
                                     </child>
+                                    <child>
+                                      <widget class="GtkRadioButton" id="udhcpc_radio">
+                                        <property name="label" translatable="yes">udhcpc</property>
+                                        <property name="visible">True</property>
+                                        <property name="can_focus">True</property>
+                                        <property name="receives_default">False</property>
+                                        <property name="active">True</property>
+                                        <property name="draw_indicator">True</property>
+                                        <property name="group">dhclient_radio</property>
+                                      </widget>
+                                      <packing>
+                                        <property name="expand">False</property>
+                                        <property name="position">4</property>
+                                      </packing>
+                                    </child>
                                   </widget>
                                 </child>
                               </widget>
--- wicd.orig/wicd/wnettools.py
+++ wicd/wicd/wnettools.py
@@ -250,6 +250,9 @@ class BaseInterface(object):
                 cmd = self.dhclient_cmd
                 if self.dhclient_needs_verbose:
                     cmd += ' -v'
+            elif self.udhcpc_cmd and cl in [misc.UDHCPC, misc.AUTO]:
+                client = "udhcpc"
+                cmd = self.udhcpc_cmd
             else:
                 client = None
                 cmd = ""
@@ -271,6 +274,11 @@ class BaseInterface(object):
                  'release' : r"%s -k %s",
                  'id' : misc.DHCPCD,
                 },
+            "udhcpc":
+                {'connect' : r"%s -n -i %s",
+                 'release' : r"killall -SIGUSR2 %s %s",
+                 'id' : misc.UDHCPC,
+                },
         }
         (client_name, cmd) = get_client_name(self.DHCP_CLIENT)
         if not client_name or not cmd:
@@ -280,7 +288,10 @@ class BaseInterface(object):
         if flavor == "connect":
             return client_dict[client_name]['connect'] % (cmd, self.iface)
         elif flavor == "release":
-            return client_dict[client_name]['release'] % (cmd, self.iface)
+            if client_name == "udhcpc":
+                return client_dict[client_name]['release'] % (cmd)
+            else:
+                return client_dict[client_name]['release'] % (cmd, self.iface)
         else:
             return client_dict[client_name]['id']
     
@@ -327,6 +338,7 @@ class BaseInterface(object):
                 self.dhclient_needs_verbose = False
         self.dhcpcd_cmd = self._find_program_path("dhcpcd")
         self.pump_cmd = self._find_program_path("pump")
+        self.udhcpc_cmd = self._find_program_path("udhcpc")
         
     def CheckWiredTools(self):
         """ Check for the existence of ethtool and mii-tool. """
@@ -485,7 +497,31 @@ class BaseInterface(object):
             print line
             
         return self._check_dhcp_result(dhcpcd_success)
-        
+
+    def _parse_udhcpc(self, pipe):
+        """ Determines if obtaining an IP using udhcpc succeeded.
+
+        Keyword arguments:
+        pipe -- stdout pipe to the dhcpcd process.
+
+        Returns:
+        'success' if successful, an error code string otherwise.
+
+        """
+        udhcpc_complete = False
+        udhcpc_success = True
+
+        while not udhcpc_complete:
+            line = pipe.readline()
+            if line.endswith("failing"):
+                udhcpc_success = False
+                udhcpc_complete = True
+            elif line == '':
+                udhcpc_complete = True
+            print line
+
+        return self._check_dhcp_result(udhcpc_success)
+
     def _check_dhcp_result(self, success):
         """ Print and return the correct DHCP connection result. 
         
@@ -524,6 +560,8 @@ class BaseInterface(object):
             return self._parse_pump(pipe)
         elif DHCP_CLIENT == misc.DHCPCD:
             return self._parse_dhcpcd(pipe)
+        elif DHCP_CLIENT == misc.UDHCPC:
+            return self._parse_udhcpc(pipe)
         else:
             print 'ERROR no dhclient found!'
     
